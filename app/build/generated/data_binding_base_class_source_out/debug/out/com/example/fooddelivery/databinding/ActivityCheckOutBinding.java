// Generated by view binder compiler. Do not edit!
package com.example.fooddelivery.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.fooddelivery.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityCheckOutBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final Button btnAdd;

  @NonNull
  public final ImageButton btnBack;

  @NonNull
  public final Button btnChoose;

  @NonNull
  public final Button btnOrder;

  @NonNull
  public final ImageView imgPaymentMethod;

  @NonNull
  public final ImageView imgPromotion;

  @NonNull
  public final RecyclerView listviewItem;

  @NonNull
  public final TextView textDistance;

  @NonNull
  public final TextView textFee;

  @NonNull
  public final TextView textNumber;

  @NonNull
  public final TextView textPaymentMethod;

  @NonNull
  public final TextView textPromotion;

  @NonNull
  public final TextView textSubFee;

  @NonNull
  public final TextView textSubPrice;

  private ActivityCheckOutBinding(@NonNull NestedScrollView rootView, @NonNull Button btnAdd,
      @NonNull ImageButton btnBack, @NonNull Button btnChoose, @NonNull Button btnOrder,
      @NonNull ImageView imgPaymentMethod, @NonNull ImageView imgPromotion,
      @NonNull RecyclerView listviewItem, @NonNull TextView textDistance, @NonNull TextView textFee,
      @NonNull TextView textNumber, @NonNull TextView textPaymentMethod,
      @NonNull TextView textPromotion, @NonNull TextView textSubFee,
      @NonNull TextView textSubPrice) {
    this.rootView = rootView;
    this.btnAdd = btnAdd;
    this.btnBack = btnBack;
    this.btnChoose = btnChoose;
    this.btnOrder = btnOrder;
    this.imgPaymentMethod = imgPaymentMethod;
    this.imgPromotion = imgPromotion;
    this.listviewItem = listviewItem;
    this.textDistance = textDistance;
    this.textFee = textFee;
    this.textNumber = textNumber;
    this.textPaymentMethod = textPaymentMethod;
    this.textPromotion = textPromotion;
    this.textSubFee = textSubFee;
    this.textSubPrice = textSubPrice;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityCheckOutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCheckOutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_check_out, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCheckOutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnAdd;
      Button btnAdd = ViewBindings.findChildViewById(rootView, id);
      if (btnAdd == null) {
        break missingId;
      }

      id = R.id.btnBack;
      ImageButton btnBack = ViewBindings.findChildViewById(rootView, id);
      if (btnBack == null) {
        break missingId;
      }

      id = R.id.btnChoose;
      Button btnChoose = ViewBindings.findChildViewById(rootView, id);
      if (btnChoose == null) {
        break missingId;
      }

      id = R.id.btnOrder;
      Button btnOrder = ViewBindings.findChildViewById(rootView, id);
      if (btnOrder == null) {
        break missingId;
      }

      id = R.id.imgPaymentMethod;
      ImageView imgPaymentMethod = ViewBindings.findChildViewById(rootView, id);
      if (imgPaymentMethod == null) {
        break missingId;
      }

      id = R.id.imgPromotion;
      ImageView imgPromotion = ViewBindings.findChildViewById(rootView, id);
      if (imgPromotion == null) {
        break missingId;
      }

      id = R.id.listviewItem;
      RecyclerView listviewItem = ViewBindings.findChildViewById(rootView, id);
      if (listviewItem == null) {
        break missingId;
      }

      id = R.id.textDistance;
      TextView textDistance = ViewBindings.findChildViewById(rootView, id);
      if (textDistance == null) {
        break missingId;
      }

      id = R.id.textFee;
      TextView textFee = ViewBindings.findChildViewById(rootView, id);
      if (textFee == null) {
        break missingId;
      }

      id = R.id.textNumber;
      TextView textNumber = ViewBindings.findChildViewById(rootView, id);
      if (textNumber == null) {
        break missingId;
      }

      id = R.id.textPaymentMethod;
      TextView textPaymentMethod = ViewBindings.findChildViewById(rootView, id);
      if (textPaymentMethod == null) {
        break missingId;
      }

      id = R.id.textPromotion;
      TextView textPromotion = ViewBindings.findChildViewById(rootView, id);
      if (textPromotion == null) {
        break missingId;
      }

      id = R.id.textSubFee;
      TextView textSubFee = ViewBindings.findChildViewById(rootView, id);
      if (textSubFee == null) {
        break missingId;
      }

      id = R.id.textSubPrice;
      TextView textSubPrice = ViewBindings.findChildViewById(rootView, id);
      if (textSubPrice == null) {
        break missingId;
      }

      return new ActivityCheckOutBinding((NestedScrollView) rootView, btnAdd, btnBack, btnChoose,
          btnOrder, imgPaymentMethod, imgPromotion, listviewItem, textDistance, textFee, textNumber,
          textPaymentMethod, textPromotion, textSubFee, textSubPrice);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
